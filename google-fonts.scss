//
// SCSS mixin for adding Google Fonts to your project by generating a single @import
// rule based on a SCSS map (see $font-list below for an example, which includes all
// of the font weights and styles for Open Sans, Roboto, Lato and Merriweather).
//
// Optionally generate helper classes in order to make using Google Fonts even easier.
//
// Developed by Donny Burnside (http://www.donnyburnside.com/)
// Do what you like with it.
//

$font-list: (
  (
    // Set the name of the font
    name: "Open Sans",
    // Set the font stub (same as the font name, but URL safe)
    stub: "Open+Sans",
    // Set the rest of the font family
    family: "sans-serif",
    // Set the class prefix
    class: 'open-sans',
    // Set the font weights, styles and variants
    styles: (300, 300i, 400, 400i, 600, 600i, 700, 700i, 800, 800i)
  ),
  (
    name: "Roboto",
    stub: "Roboto",
    family: "Helvetica, sans-serif",
    class: 'roboto',
    styles: (100, 100i, 300, 300i, 400, 400i, 500, 500i, 700, 700i, 900, 900i)
  ),
  (
    name: "Lato",
    stub: "Lato",
    family: "sans-serif",
    class: 'lato',
    styles: (100, 100i, 300, 300i, 400, 400i, 700, 700i, 900, 900i)
  ),
  (
    name: "Merriweather",
    stub: "Merriweather",
    family: "'Times New Roman', serif",
    class: 'merriweather',
    styles: (300, 300i, 400, 400i, 700, 700i, 900, 900i)
  )
);

@mixin google-fonts($fonts, $generate_classes: true) {
  $base_url: "//fonts.googleapis.com/css?family=";

  @for $i from 1 through length($fonts) {
    $font: nth($fonts, $i);
    $font-name: map-get($font, name);
    $font-stub: map-get($font, stub);
    $font-family: #{"'" + $font-name + "', " + map-get($font, family)};
    $font-class: map-get($font, class);
    $font-styles: map-get($font, styles);

    // Add pipe seperator
    @if $i > 1 {
      $base_url: $base_url + '|';
    }

    // Add font name to url
    $base_url: $base_url + $font-stub;

    // Generate classes
    @if $generate_classes == true {
      .#{$font-class} {
        font-family: $font-family;
      }
    }

    // Add font styles
    @for $n from 1 through length($font-styles) {
      $font-style: nth($font-styles, $n);
      $font-style-italic: if( str-index(#{$font-style}, i), true, false);
      $font-weight: if( str-index(#{$font-style}, i), str-slice( #{$font-style}, 1, str-index(#{$font-style}, i) - 1 ), $font-style);
      $font-style-class: $font-class + "-" + $font-style;

      // Prefix font style rules
      @if $n == 1 {
        // Add colon prefix
        $base_url: $base_url + ':';
      } @elseif $n > 1 {
        // Add comma seperator
        $base_url: $base_url + ',';
      }

      // Add font style to url
      $base_url: $base_url + $font-style;

      // Generate classes
      @if $generate_classes == true {
        .#{$font-style-class} {
          font-family: $font-family;

          // Add weight
          font-weight: $font-weight;

          // Add italics
          @if $font-style-italic {
            font-style: italic;
          }
        }
      }
    }
  }

  // Output the @import rule
  @import url('#{$base_url}');
}

.dummy {
  // This is a dummy element
  // It is purposely used before we run the mixin to show that the generated
  // @import rule is placed at the top of your stylesheet.
  content: 'Dummy!';
}


// Run the mixin
@include google-fonts($font-list, true);


.dummy {
  // Use the fonts by using @extend. But only after the mixin has run...
  // Note: '$generate_classes' must be set to true for this to work
  @extend .roboto;
}
